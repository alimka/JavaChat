package client;

import clientserver.Message;
import com.sun.xml.internal.ws.api.streaming.XMLStreamReaderFactory.Default;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
// import javax.print.attribute.AttributeSet;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/**
 *
 * @author delor
 */
public class ClientChatFrame extends javax.swing.JFrame implements MsgClientInterface {

    private Client client;
    private Font font;

    /** Creates new form ClientChatFrame */
    public ClientChatFrame() {
        initComponents();
        font = new Font("Serif", Font.BOLD, 14);
        setDefaultJTextPaneFont(colorTextPane, font);
    }

    /**
     *
     * @param jtp
     * @param font
     */
    public static void setDefaultJTextPaneFont(JTextPane jtp, Font font) {
        MutableAttributeSet attrs = jtp.getInputAttributes();

        StyleConstants.setFontFamily(attrs, font.getFamily());
        StyleConstants.setFontSize(attrs, font.getSize());
        StyleConstants.setItalic(attrs, (font.getStyle() & Font.ITALIC) != 0);
        StyleConstants.setBold(attrs, (font.getStyle() & Font.BOLD) != 0);

        StyledDocument doc = jtp.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength() + 1, attrs, false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorTextPane = new client.ColorTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectMI = new javax.swing.JMenuItem();
        disconnectMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

        jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldKeyPressed(evt);
            }
        });
        getContentPane().add(jTextField, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(colorTextPane);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "aaa" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.LINE_END);

        jMenu1.setText("File");

        connectMI.setText("Connect");
        connectMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMIActionPerformed(evt);
            }
        });
        jMenu1.add(connectMI);

        disconnectMI.setText("Disconnect");
        disconnectMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectMIActionPerformed(evt);
            }
        });
        jMenu1.add(disconnectMI);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            try {
                String msg = jTextField.getText();
                Message m = new Message(nick);
                String to = null;
                String[] p;
                String txt = null;
                if (msg.startsWith("/msg")) {
                    p = msg.split(" ", 3);
                    for (String s : p) {
                        System.out.println(s);
                    }
                    m.setFrom(nick);
                    m.setTo(p[1]);
                    m.setMessage(p[2]);
                } else {
                    m.setFrom(nick);
                    m.setMessage(msg);
                }
                System.out.println(m.toString());
                client.sendMessage(m);
                jTextField.setText("");
            } catch (IOException ex) {
                // Logger.getLogger(ClientChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Nie dziaÅ‚a ENTER");
            }
        }
    }//GEN-LAST:event_jTextFieldKeyPressed

    private void connectMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMIActionPerformed

        String host = (String) JOptionPane.showInputDialog(this, "Podaj adres serwera", null, JOptionPane.PLAIN_MESSAGE, null, null, "127.0.0.1");
        client = new Client(host, this);
        client.start();

        System.out.println("asd");
        nick = (String) JOptionPane.showInputDialog(this, "Podaj nick", JOptionPane.PLAIN_MESSAGE);
        setTitle("Client: " + nick);
        try {
            client.sendMessage(new Message(nick));
        } catch (IOException ex) {
            Logger.getLogger(ClientChatFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectMIActionPerformed

    private void disconnectMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectMIActionPerformed
        client.disconnect();
    }//GEN-LAST:event_disconnectMIActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientChatFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private client.ColorTextPane colorTextPane;
    private javax.swing.JMenuItem connectMI;
    private javax.swing.JMenuItem disconnectMI;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JList jList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField;
    // End of variables declaration//GEN-END:variables
    private int port = 6666;
    private Socket socket;
    private String nick;
    private ObjectInputStream in;
    private ObjectOutputStream out;

    /**
     *
     * @param msg
     */
    public void showMessage(Message msg) {
        String txt = null;
        if (msg.getTo() != null) {
            txt = msg.getFrom() + " -> " + msg.getTo() + ": " + msg.getMessage() + "\n";
            colorTextPane.append(Color.blue, txt);
        } else {
            txt = msg.getFrom() + ": " + msg.getMessage() + "\n";
            colorTextPane.append(Color.black, txt);
        }

    }

    DefaultListModel model;
    public void showUsers(Vector<String> clientNicks) {
        model = new DefaultListModel();
        jList = new JList(model);
        
        for (int i = 0; i < clientNicks.size(); ++i) {
            model.add(i, clientNicks.get(i));
        }
    }

    public void addUsers(String userNick) {
        int pos = model.getSize();
        model.add(pos, userNick);
    }

    public void removeUser(String userNick) {
        for (int i = 0; i < model.getSize(); ++i) {
            if (userNick.compareTo((String) model.get(i)) == 0) {
                model.remove(i);
                break;
            }
        }
    }

}
