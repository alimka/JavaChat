package client;

import common.Packet;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Kamila Turek
 */
public class ClientChatFrame extends javax.swing.JFrame implements ClientGUI {

    /** Creates new form ClientChatFrame */
    public ClientChatFrame() {
        initComponents();
        font = new Font("Serif", Font.BOLD, 14);
        setDefaultJTextPaneFont(colorTextPane, font);
        listModel = new DefaultListModel();
        jList.setModel(listModel);
    }

    /**
     *
     * @param jtp
     * @param font
     */
    public static void setDefaultJTextPaneFont(JTextPane jtp, Font font) {
        MutableAttributeSet attrs = jtp.getInputAttributes();

        StyleConstants.setFontFamily(attrs, font.getFamily());
        StyleConstants.setFontSize(attrs, font.getSize());
        StyleConstants.setItalic(attrs, (font.getStyle() & Font.ITALIC) != 0);
        StyleConstants.setBold(attrs, (font.getStyle() & Font.BOLD) != 0);

        StyledDocument doc = jtp.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength() + 1, attrs, false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        colorTextPane = new common.ColorTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        connectButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");
        setMinimumSize(new java.awt.Dimension(300, 64));

        jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldKeyPressed(evt);
            }
        });
        getContentPane().add(jTextField, java.awt.BorderLayout.PAGE_END);

        colorTextPane.setEditable(false);
        colorTextPane.setMinimumSize(new java.awt.Dimension(300, 6));
        jScrollPane1.setViewportView(colorTextPane);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 131));

        jScrollPane2.setViewportView(jList);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.EAST);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        getContentPane().add(connectButton, java.awt.BorderLayout.PAGE_START);
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeyPressed
        if (evt.getKeyCode() == 10) {
            try {
                String txt = jTextField.getText();
                Packet m = new Packet(nick);
                String[] p;
                if (txt.startsWith("/msg")) {
                    p = txt.split(" ", 3);
                    for (String s : p) {
                        System.out.println(s);
                    }
                    m.setTo(p[1]);
                    m.setMessage(p[2]);
                } else {
                    m.setMessage(txt);
                }
                System.out.println(m.toString());
                client.send(m);
                jTextField.setText("");
            } catch (IOException ex) {
                // Logger.getLogger(ClientChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println("Nie dzia≈Ça ENTER");
            }
        }
    }//GEN-LAST:event_jTextFieldKeyPressed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        if (!connect) {
            String host = (String) JOptionPane.showInputDialog(this,
                    "Podaj adres serwera", null, JOptionPane.PLAIN_MESSAGE,
                    null, null, "127.0.0.1");
            int port = Integer.parseInt((String) JOptionPane.showInputDialog(
                    this, "Podaj port serwera", null, JOptionPane.PLAIN_MESSAGE,
                    null, null, "6666"));
            client = new Client(host, port, this);
            client.start();

            nick = (String) JOptionPane.showInputDialog(this, "Podaj nick",
                    JOptionPane.PLAIN_MESSAGE);
            connectButton.setText("Disconnect");
            setTitle("Client: " + nick);
            connect = true;
            try {
                client.send(new Packet(nick));
            } catch (IOException ex) {
                Logger.getLogger(ClientChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Packet m = new Packet();
                m.setTo(nick);
                client.send(m);
                client.disconnect();
                connect = false;
                connectButton.setText("Connect");
            } catch (IOException ex) {
                Logger.getLogger(ClientChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientChatFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private common.ColorTextPane colorTextPane;
    private javax.swing.JButton connectButton;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JList jList;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField;
    // End of variables declaration//GEN-END:variables
    private String nick;
    private Client client;
    private Font font;
    private DefaultListModel listModel;
    boolean connect = false;

    /**
     *
     * @param txt
     */
    public void showMessage(Packet pack) {
        String txt = pack.from() + ": " + pack.message() + "\n";
        if (pack.type() == Packet.Type.PRIVATE) {
            colorTextPane.append(Color.blue, txt);
        } else {
            colorTextPane.append(Color.black, txt);
        }

    }

    public void showUsers(String users) {
        System.out.println("Show User");
        String[] usersList = users.split(",");
        for (int i = 0; i < usersList.length; ++i) {
            listModel.add(i, usersList[i]);
        }
    }

    public void addUser(String user) {
        listModel.addElement(user);
    }

    public void removeUser(String user) {
        for (int i = 0; i < listModel.getSize(); ++i) {
            if (user.equals(listModel.get(i))) {
                System.out.println(user + " " + listModel.get(i));
                listModel.remove(i);
                break;
            }
        }
    }
}
